https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof

输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。

 

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]
 

提示：

节点总数 <= 10000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        res, path = [], []


        def find_sum(root,sum):#find_sum会沿着线序遍历走，并且不断path
            if root==None:
                return 
            else: 
                path.append(root.val)
                sum=sum-root.val
                if (sum==0) & (root.left==None) & (root.right==None):#读取完所有节点并且sum剩余0
                    res.append(path[:])#一定要复制path,否则会随着path变化而变化
                find_sum(root.left,sum)
                find_sum(root.right,sum)
                #当前节点判断完，需要删除该节点
                path.pop()
        find_sum(root,sum)
        return res

