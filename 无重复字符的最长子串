https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/

给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n=len(s)
        len_list=[]#统计每个不同字符的长度
        k=1
        #zifu=''
        max_=0
        if len(s)==0:#空值算1
            return 0
        elif len(s)==1:
            return 1
        i=0
        set_=[s[i]]
        #print(set_)
        while i+1<n:#需要包含两个以上字母才行
       
            if (s[i+1] not in set_)&(i+1<n-1):
            
                k+=1
                set_.append(s[i+1])
                #print(set_)
                #print(k)
                #zifu=zifu+s[i]
            elif (s[i+1] not in set_)&(i+1==n-1):#处理到最后一个字母
            
                k+=1
                #set_.add(s[i+1])
                if k>max_:
                    max_=k                
                #print(set_)
                #print(k)
                #zifu=zifu+s[i]                
            else:#即s[i+1] not in set_
                #len_list.append(k)
                if k>max_:
                    max_=k
                    #max_=longest
                    #print(max_)
                for j,value in enumerate(set_):#找出重复元素位置，从该位置后保留重置集合
                    if value==s[i+1]:
                        set_=set_[j+1:]
                        set_.append(s[i+1])
                        break 
                k=len(set_)
                
            i+=1
        return max_
