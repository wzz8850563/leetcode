https://leetcode-cn.com/problems/sort-list/

在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4
示例 2:

输入: -1->5->3->4->0
输出: -1->0->3->4->5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
#归并思想
def sort_merge(list_num):
    if len(list_num)<=1:
        return list_num
    else:
        middle=len(list_num)//2
        sort_left=sort_merge(list_num[:middle])
        sort_right=sort_merge(list_num[middle:])
        return merge(sort_left,sort_right)

def merge(sort_left,sort_right):
    len_l=len(sort_left)
    len_r=len(sort_right)
    l=0
    r=0
    sort_result=[]
    while (l<=len_l-1)&(r<=len_r-1):
        if sort_left[l]<=sort_right[r]:
            sort_result.append(sort_left[l])
            l+=1
        else:
            sort_result.append(sort_right[r])
            r+=1            
    if l==len_l:
        sort_result.extend(sort_right[r:])
    else:#r=len_r
        sort_result.extend(sort_left[l:])
    return sort_result


class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if head==None:#链表为空的情况
            return head
        nums=[]
        while head:
            nums.append(head.val)
            head=head.next
        sort_nums=sort_merge(nums)
        
        
        #for i in range(len(sort_nums)-1):
            #result.append(ListNode(sort_nums[i]))

        head=ListNode(sort_nums[0])
        p=head
        
        for i in range(len(sort_nums)-1):
            
            p.next=ListNode(sort_nums[i+1])
            p=p.next
            
        return head
