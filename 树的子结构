输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)

B是A的子结构， 即 A中有出现和B相同的结构和节点值。

例如:
给定的树 A:

     3
    / \
   4   5
  / \
 1   2
给定的树 B：

   4 
  /
 1
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。

示例 1：

输入：A = [1,2,3], B = [3,1]
输出：false
示例 2：

输入：A = [3,4,5,1,2], B = [4,1]
输出：true

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


def find_sub(a,b):#一开始a,b都不为none
    if (a==None) &(b!=None):#a先遍历完b还没有
        return False
    if b==None:#b先遍历
        return True
    if a.val!=b.val:
        return False
    else:#a.var==b.var
        return find_sub(a.left,b.left)&find_sub(a.right,b.right)
    


class Solution:
    def isSubStructure(self, A: TreeNode, B: TreeNode) -> bool:
        if (A==None) |(B==None):
            return False
        if find_sub(A,B):
            return True
        else:
            return self.isSubStructure(A.left,B)|self.isSubStructure(A.right,B)
