https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/

请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [20,9],
  [15,7]
]
 

提示：

节点总数 <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from  collections import deque
#注意不要用tem.append([root])这种形式，否则pop后为deque([])，这样不是空，会一直循环下去
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root ==None:
            return []
        res=[]
        tem=deque()
        tem.append(root)
        order=1
        while tem:
            
            res_tem=[]
            
            for _ in range(len(tem)):#循环删除一定长度
                node=tem.popleft()
                res_tem.append(node.val)
                if node.left:
                    tem.append(node.left)
                if node.right:
                    tem.append(node.right)
            res.append(res_tem[::order])
            
            order*=-1
        return res
