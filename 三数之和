https://leetcode-cn.com/problems/3sum/

给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

 

示例：

给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        sort_list=sorted(nums)
        n=len(sort_list)
        #保证ijk每次便化都是不同数，相同时直接跳过，这样结果不会出翔相同元组
        result=[]
        if n==3:
            if sort_list[0]+sort_list[1]+sort_list[2]==0:
                return [[sort_list[0],sort_list[1],sort_list[2]]]
            else:
                return []
        else:
            for i in range(n-2):
                if (i>0)&(sort_list[i]==sort_list[i-1]):#保证i每次变化不同
                    continue
                j=i+1
                k=n-1
                last_k=0
                last_j=2
                while j<k:


                    if sort_list[i]+sort_list[j]+sort_list[k]<0:
                        j+=1
                    elif sort_list[i]+sort_list[j]+sort_list[k]>0:
                        k-=1
                    else:#==0，则j,k一起变化，确保出现连续j相同大小或k相同大小使的元组重复
                        result.append([sort_list[i],sort_list[j],sort_list[k]])
                        last_k=sort_list[k]
                        last_j=sort_list[j]
                        k-=1
                        j+=1
                        while (j<k)&(sort_list[k]==last_k)&(sort_list[j]==last_j):
                            k-=1
                            j+=1              


        return result
