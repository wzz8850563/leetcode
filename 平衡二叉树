https://leetcode-cn.com/problems/balanced-binary-tree/

给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/balanced-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


def split_count(tree):#遍历所有节点的树
    left=tree.left
    right=tree.right
    #初始化balance
    balance_l,balance_r=True,True
    if left!=None:
        deep_left=split_count(left)
        if deep_left==-1:
            return deep_left
    else:
        deep_left=0
    if right!=None:
        deep_right=split_count(right)
        if deep_right==-1:
            return deep_right
    else:
        deep_right=0
    if (abs(deep_left-deep_right)>1):
        return -1
    else:
        return max(deep_left,deep_right)+1

    


class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if root==None:
            return True
        deep=split_count(root)
        if deep==-1:
            balance=False
        else:
            balance=True
        return balance
